{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","div","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.008ce386.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyD-8N92-XtxQdcqwEKgwomvqVB7zWKvyVY\",\r\n  authDomain: \"not-instagaram.firebaseapp.com\",\r\n  projectId: \"not-instagaram\",\r\n  storageBucket: \"not-instagaram.appspot.com\",\r\n  messagingSenderId: \"143592971580\",\r\n  appId: \"1:143592971580:web:ab332e9e7d14d65bd6d239\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\nexport { projectStorage, projectFirestore, timestamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = collection => {\r\n  const [docs, setDocs] = useState([]);\r\n  useEffect(() => {\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot(snap => {\r\n        let documents = [];\r\n        snap.forEach(doc => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n    return () => unsub;\r\n  }, [collection]);\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import useFirestore from \"../hooks/useFirestore\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore(\"images\");\r\n  console.log(docs);\r\n\r\n  return (\r\n    <div className='img-grid'>\r\n      {docs &&\r\n        docs.map(doc => (\r\n          <motion.div\r\n            className='img-wrap'\r\n            key={doc.id}\r\n            layout\r\n            whileHover={{ opacity: 1 }}\r\n            onClick={() => setSelectedImg(doc.url)}>\r\n            <motion.img\r\n              src={doc.url}\r\n              alt='photo'\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              transition={{ delay: 1 }}\r\n            />\r\n          </motion.div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import { motion } from \"framer-motion\";\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n  const handleClick = e => {\r\n    if (e.target.classList.contains(\"backdrop\")) {\r\n      setSelectedImg(null);\r\n    }\r\n  };\r\n  return (\r\n    <motion.div\r\n      className='backdrop'\r\n      onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}>\r\n      <motion.img\r\n        src={selectedImg}\r\n        alt='unlarged pic'\r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className='title'>\n      <h1>Not Instagram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp\r\n} from \"../firebase/config\";\r\n\r\nconst useStorage = file => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //  references\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection(\"images\");\r\n\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      snap => {\r\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      err => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        const url = await storageRef.getDownloadURL();\r\n        const createdAt = timestamp();\r\n        collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n\r\n  return (\r\n    <motion.div\r\n      className='progress-bar'\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + \"%\" }}></motion.div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n\r\n  const handleChange = e => {\r\n    let selected = e.target.files[0];\r\n\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(\"\");\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Please select an image file (png or jpg)\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type='file' onChange={handleChange} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className='output'>\r\n        {error && <div className='error'>{error}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className='App'>\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}